"""OpenAI assistant tools wrappers and chat completions."""

import aiogram
import openai

from src.utils import bot_globals, text_formatting
from src.openai import openai_globals


class StreamEventHandler(openai.AsyncAssistantEventHandler):
    """Class for handling streamed events generated by assistants"""

    def __init__(self, message) -> None:
        """Initialize variables needed to format tg message while streaming."""
        super().__init__()
        self.message = message
        self.response = ""
        self.delta_chars_num = 0
        self.chars_to_update = 0

    async def on_text_created(self, text) -> None:
        """Send a text placeholder to a user until a response will be generated."""
        self.message = await self.message.answer("...")

    async def on_text_delta(self, delta, snapshot) -> None:
        """Edit message each time when enough difference is accumulated."""
        self.response += delta.value
        self.delta_chars_num += len(delta.value)
        if self.delta_chars_num > self.chars_to_update:
            self.delta_chars_num = 0
            self.chars_to_update = text_formatting.stream_increment(len(self.response))
            self.message = await self.message.edit_text(self.response + "...")

    async def on_text_done(self, text) -> None:
        """After generation remove decorative '...' at the end of the message."""
        await self.message.edit_text(text.value)


async def stream_events(message: aiogram.types.Message, user: dict) -> None:
    """Wrapper over OpenAI's async streaming completion API call."""
    await bot_globals.bot.send_chat_action(
        message.chat.id, aiogram.enums.ChatAction.TYPING
    )
    async with openai_globals.client.beta.threads.runs.stream(
        thread_id=user["thread_id"],
        assistant_id=user["assistant_id"],
        event_handler=StreamEventHandler(message),
    ) as stream:
        await stream.until_done()


async def upload_file(file: object, purpose: str) -> str:
    """Upload the user provided file to OpenAI vector store."""
    filepath = f"src/downloads/{file.file_name}"
    await bot_globals.bot.download(file, filepath)
    uploaded_file = await openai_globals.client.files.create(
        file=open(filepath, "rb"),
        purpose=purpose,
    )
    return uploaded_file.id
